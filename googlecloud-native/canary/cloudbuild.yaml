# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# [START cloudbuild_microservice_demo_cloudbuild]

# This configuration file is used to build and deploy the app into a
# GKE cluster using Google Cloud Build.
#
# PREREQUISITES:
# - Cloud Build service account must have role: "Kubernetes Engine Developer"

# USAGE:
# GCP zone and GKE target cluster must be specified as substitutions
# Example invocation:
# `gcloud builds submit --config=cloudbuild.yaml --substitutions=_ZONE=us-central1-b,_CLUSTER=demo-app-staging .`

steps:
#Build and Push Images
- name: 'gcr.io/cloud-builders/docker'
  id: ad
  waitFor: ['-']
  entrypoint: 'bash'
  args: [ '-c', 'docker build -t $$AR/adservice:canary src/adservice/.']
  secretEnv: ['AR'] 
- name: 'gcr.io/cloud-builders/docker'
  id: pushAd
  waitFor:
    - ad
  entrypoint: 'bash'
  args: [ '-c', 'docker push $$AR/adservice:canary']
  secretEnv: ['AR']

- name: 'gcr.io/cloud-builders/docker'
  id: cart
  waitFor: ['-']
  entrypoint: 'bash'
  args: [ '-c', 'docker build -t $$AR/cartservice:canary src/cartservice/src/.']
  secretEnv: ['AR']
- name: 'gcr.io/cloud-builders/docker'
  id: pushCart
  waitFor:
    - cart
  entrypoint: 'bash'
  args: [ '-c', 'docker push $$AR/cartservice:canary']
  secretEnv: ['AR']

- name: 'gcr.io/cloud-builders/docker'
  id: checkout
  waitFor: ['-']
  entrypoint: 'bash'
  args: [ '-c', 'docker build -t $$AR/checkoutservice:canary src/checkoutservice/.']
  secretEnv: ['AR']
- name: 'gcr.io/cloud-builders/docker'
  id: pushCheckout
  waitFor:
    - checkout
  entrypoint: 'bash'
  args: [ '-c', 'docker push $$AR/checkoutservice:canary']
  secretEnv: ['AR']

- name: 'gcr.io/cloud-builders/docker'
  id: currency
  waitFor: ['-']
  entrypoint: 'bash'
  args: [ '-c', 'docker build -t $$AR/currencyservice:canary src/currencyservice/.']
  secretEnv: ['AR']
- name: 'gcr.io/cloud-builders/docker'
  id: pushCurrency
  waitFor:
    - currency
  entrypoint: 'bash'
  args: [ '-c', 'docker push $$AR/currencyservice:canary']
  secretEnv: ['AR']

- name: 'gcr.io/cloud-builders/docker'
  id: email
  waitFor: ['-']
  entrypoint: 'bash'
  args: [ '-c', 'docker build -t $$AR/emailservice:canary src/emailservice/.']
  secretEnv: ['AR']
- name: 'gcr.io/cloud-builders/docker'
  id: pushEmail
  waitFor:
    - email
  entrypoint: 'bash'
  args: [ '-c', 'docker push $$AR/emailservice:canary']
  secretEnv: ['AR']

- name: 'gcr.io/cloud-builders/docker'
  id: front
  waitFor: ['-']
  entrypoint: 'bash'
  args: [ '-c', 'docker build -t $$AR/frontend:canary src/frontend/.']
  secretEnv: ['AR']
- name: 'gcr.io/cloud-builders/docker'
  id: pushFront
  waitFor:
    - front
  entrypoint: 'bash'
  args: [ '-c', 'docker push $$AR/frontend:canary']
  secretEnv: ['AR']

- name: 'gcr.io/cloud-builders/docker'
  id: load
  waitFor: ['-']
  entrypoint: 'bash'
  args: [ '-c', 'docker build -t $$AR/loadgenerator:canary src/loadgenerator/.']
  secretEnv: ['AR']
- name: 'gcr.io/cloud-builders/docker'
  id: pushLoad
  waitFor:
    - load
  entrypoint: 'bash'
  args: [ '-c', 'docker push $$AR/loadgenerator:canary']
  secretEnv: ['AR']

- name: 'gcr.io/cloud-builders/docker'
  id: pay
  waitFor: ['-']
  entrypoint: 'bash'
  args: [ '-c', 'docker build -t $$AR/paymentservice:canary src/paymentservice/.']
  secretEnv: ['AR']
- name: 'gcr.io/cloud-builders/docker'
  id: pushPay
  waitFor:
    - pay
  entrypoint: 'bash'
  args: [ '-c', 'docker push $$AR/paymentservice:canary']
  secretEnv: ['AR']

- name: 'gcr.io/cloud-builders/docker'
  id: product
  waitFor: ['-']
  entrypoint: 'bash'
  args: [ '-c', 'docker build -t $$AR/productcatalogservice:canary src/productcatalogservice/.']
  secretEnv: ['AR']
- name: 'gcr.io/cloud-builders/docker'
  id: pushProduct
  waitFor:
    - product
  entrypoint: 'bash'
  args: [ '-c', 'docker push $$AR/productcatalogservice:canary']
  secretEnv: ['AR']

- name: 'gcr.io/cloud-builders/docker'
  id: recommend
  waitFor: ['-']
  entrypoint: 'bash'
  args: [ '-c', 'docker build -t $$AR/recommendationservice:canary src/recommendationservice/.']
  secretEnv: ['AR']
- name: 'gcr.io/cloud-builders/docker'
  id: pushRecommend
  waitFor:
    - recommend
  entrypoint: 'bash'
  args: [ '-c', 'docker push $$AR/recommendationservice:canary']
  secretEnv: ['AR']

- name: 'gcr.io/cloud-builders/docker'
  id: ship
  waitFor: ['-']
  entrypoint: 'bash'
  args: [ '-c', 'docker build -t $$AR/shippingservice:canary src/shippingservice/.']
  secretEnv: ['AR']
- name: 'gcr.io/cloud-builders/docker'
  id: pushShip
  waitFor:
    - ship
  entrypoint: 'bash'
  args: [ '-c', 'docker push $$AR/shippingservice:canary']
  secretEnv: ['AR']

#Get the cluster credential and nginx load balancer IP address
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    apt-get update && apt-get install -y gettext-base jq \
    && gcloud container clusters get-credentials online-boutique --zone us-west1-a --project $PROJECT_ID \
    && export DEFAULT_REPO=$$AR && export NGINX_LB_IP=$(kubectl get service ingress-nginx-controller -n ingress-nginx -ojson | jq -r ".status.loadBalancer.ingress[].ip") \
    && envsubst < googlecloud-native/canary/kubernetes-manifests.yaml > googlecloud-native/canary/kubernetes-manifests-ready.yaml
  secretEnv: ['AR']

#Deploy
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args: [ '-c', 'kubectl apply -f googlecloud-native/canary/kubernetes-manifests-ready.yaml']

availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_NUMBER/secrets/ar-repo/versions/1
    env: 'AR'

# Add more power, and more time, for heavy Skaffold build
timeout: '900s'
options:
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY

# [END cloudbuild_microservice_demo_cloudbuild]